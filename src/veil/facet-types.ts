/**
 * Facet aspect interfaces and type definitions
 * Based on the facet ontology design
 */

// ============================================
// ASPECT INTERFACES
// ============================================

/**
 * Has human/agent-readable content
 */
export interface ContentAspect {
  content: string;
}

/**
 * Has structured state data (for programmatic use)
 */
export interface StateAspect<T = Record<string, any>> {
  state: T;
}

/**
 * Generated by an agent (not external events)
 */
export interface AgentGeneratedAspect {
  agentId: string;
  agentName?: string;
}

/**
 * Removed at end of frame
 */
export interface EphemeralAspect {
  ephemeral: true;
}

/**
 * Belongs to specific scopes
 */
export interface ScopedAspect {
  scopes: string[];
}

/**
 * Belongs to a specific stream
 */
export interface StreamAspect {
  streamId: string;
  streamType?: string;
}

/**
 * References other facets
 */
export interface TargetedAspect {
  targetFacetIds: string[];
}

/**
 * Base for all facets
 */
export interface BaseFacet {
  id: string;
  type: string;
}

// ============================================
// AGENT COMMUNICATION FACETS
// ============================================

/**
 * What agents say
 */
export type SpeechFacet = BaseFacet & ContentAspect & AgentGeneratedAspect & StreamAspect & {
  type: 'speech';
};

/**
 * Agent's internal reasoning
 */
export type ThoughtFacet = BaseFacet & ContentAspect & AgentGeneratedAspect & StreamAspect & {
  type: 'thought';
};

/**
 * Actions/tool use
 */
export type ActionFacet = BaseFacet & ContentAspect & StateAspect<{
  toolName: string;
  parameters: Record<string, any>;
}> & AgentGeneratedAspect & StreamAspect & {
  type: 'action';
};

// ============================================
// CORE CONTENT FACETS
// ============================================

/**
 * Events - things that happen at a specific moment
 */
export type EventFacet = BaseFacet & ContentAspect & StateAspect<{
  source: string;
  eventType: string;
  metadata?: any;
}> & StreamAspect & {
  type: 'event';
};

/**
 * State - the current state of things in the world
 */
export type StateFacet = BaseFacet & ContentAspect & StateAspect & ScopedAspect & {
  type: 'state';
  entityType: 'component' | 'element' | 'agent';
  entityId: string;
  // Optional renderers for state transitions (as serializable JS code strings)
  attributeRenderers?: Record<string, string>; // JS code: (value) => string | null
  transitionRenderers?: Record<string, string>; // JS code: (newValue, oldValue) => string | null
};

/**
 * Ambient - background information, atmosphere, context
 */
export type AmbientFacet = BaseFacet & ContentAspect & StreamAspect & {
  type: 'ambient';
};

/**
 * Ephemeral - temporary information that doesn't persist
 */
export type EphemeralFacet = BaseFacet & ContentAspect & EphemeralAspect & {
  type: 'ephemeral';
};

// ============================================
// CONFIGURATION FACETS
// ============================================

/**
 * Configuration (not visible to agents)
 */
export type ConfigFacet = BaseFacet & StateAspect & {
  type: 'config';
  configType: string;
};

/**
 * Internal component state (not visible to agents)
 */
export type InternalStateFacet = BaseFacet & StateAspect & {
  type: 'internal-state';
  componentId: string;
};

// ============================================
// META-FACETS (Endotemporal Changes)
// ============================================

/**
 * Records that state changed
 */
export type StateChangeFacet = BaseFacet & TargetedAspect & StateAspect<{
  changes: Record<string, { old: any; new: any }>;
}> & EphemeralAspect & {
  type: 'state-change';
};

/**
 * Scope management
 */
export type ScopeChangeFacet = BaseFacet & StateAspect<{
  operation: 'add' | 'remove';
  scopeId: string;
  scopeData?: any;
}> & EphemeralAspect & {
  type: 'scope-change';
};

/**
 * Stream management
 */
export type StreamChangeFacet = BaseFacet & StateAspect<{
  operation: 'add' | 'remove' | 'activate';
  streamId: string;
  streamType?: string;
}> & EphemeralAspect & {
  type: 'stream-change';
};

/**
 * Agent lifecycle
 */
export type AgentLifecycleFacet = BaseFacet & StateAspect<{
  operation: 'register' | 'deregister' | 'activate' | 'deactivate';
  agentId: string;
  agentInfo?: any;
}> & EphemeralAspect & {
  type: 'agent-lifecycle';
};

// ============================================
// SYSTEM FACETS
// ============================================

/**
 * Triggers agent processing
 */
export type AgentActivationFacet = BaseFacet & StateAspect<{
  reason: string;
  priority: 'low' | 'normal' | 'high' | 'critical';
  sourceAgentId?: string;
}> & EphemeralAspect & {
  type: 'agent-activation';
};

/**
 * Rendered context for agents (meta-facet, not rendered in conversation)
 */
export type RenderedContextFacet = BaseFacet & StateAspect<{
  activationId: string;
  tokenCount: number;
  compressionRatio?: number;
  context?: any; // The actual RenderedContext object
}> & EphemeralAspect & {
  type: 'rendered-context';
};

/**
 * Action definitions (tools available to agents)
 */
export type ActionDefinitionFacet = BaseFacet & StateAspect<{
  actionName: string;
  parameters: string[];
  description: string;
  handler: string;
}> & {
  type: 'action-definition';
};

/**
 * Element tree structure facet (infrastructure)
 */
export type ElementTreeFacet = BaseFacet & StateAspect<{
  elementId: string;
  elementType: string;
  parentId: string | null;
  name: string;
  active: boolean;
  components: Array<{
    type: string;
    index: number;
    config?: any;
  }>;
}> & {
  type: 'element-tree';
};

/**
 * Element creation request facet (ephemeral)
 */
export type ElementRequestFacet = BaseFacet & StateAspect<{
  parentId: string | null;
  elementType: string;
  name: string;
  components?: Array<{
    type: string;
    config?: any;
  }>;
}> & EphemeralAspect & {
  type: 'element-request';
};

/**
 * Component creation request facet for MARTEM architecture (ephemeral)
 */
export type ComponentRequestFacet = BaseFacet & StateAspect<{
  /** Unique component type identifier (e.g., 'discord-afferent', 'rate-limit-modulator') */
  componentType: string;
  
  /** Component class for Space registration */
  componentClass: 'modulator' | 'afferent' | 'receptor' | 'transform' | 'effector' | 'maintainer';
  
  /** Parent element ID */
  elementId: string;
  
  /** Component-specific configuration */
  config?: any;
  
  /** Optional version for hot-reload compatibility */
  version?: string;
}> & EphemeralAspect & {
  type: 'component-request';
};

// ============================================
// UNION TYPES
// ============================================

/**
 * All facets that have content (visible to agents)
 * This is any facet with ContentAspect
 */
export type ContentFacet = Facet & ContentAspect;

/**
 * The Facet type - extensible by component developers
 * Any object that extends BaseFacet is a valid facet
 * Behavior is determined by aspects, not by specific type
 */
export interface Facet extends BaseFacet {
  // type can be any string, allowing extension
  type: string;
  // Any additional properties are allowed
  [key: string]: any;
}

/**
 * Core facet types provided by the framework
 * Component developers can create additional types
 */
export type CoreFacet = 
  // Agent Communication Facets
  | SpeechFacet
  | ThoughtFacet
  | ActionFacet
  // Core Content Facets
  | EventFacet
  | StateFacet
  | AmbientFacet
  | EphemeralFacet
  // Configuration Facets
  | ConfigFacet
  | InternalStateFacet
  // Element Management
  | ElementTreeFacet
  | ElementRequestFacet
  | ComponentRequestFacet
  // Meta-Facets (Infrastructure)
  | StateChangeFacet
  | ScopeChangeFacet
  | StreamChangeFacet
  | AgentLifecycleFacet
  | AgentActivationFacet
  | RenderedContextFacet
  | ActionDefinitionFacet;

// ============================================
// VEIL DELTA TYPES (Exotemporal Changes)
// ============================================

export type VEILDelta = 
  | { type: 'addFacet'; facet: Facet }
  | { type: 'changeFacet'; id: string; changes: Partial<Facet> }
  | { type: 'removeFacet'; id: string };

// ============================================
// TYPE GUARDS
// ============================================

export function hasContentAspect(facet: Facet): facet is Facet & ContentAspect {
  return 'content' in facet;
}

export function hasStateAspect(facet: Facet): facet is Facet & StateAspect {
  return 'state' in facet;
}

export function hasAgentGeneratedAspect(facet: Facet): facet is Facet & AgentGeneratedAspect {
  return 'agentId' in facet;
}

export function hasEphemeralAspect(facet: Facet): facet is Facet & EphemeralAspect {
  return 'ephemeral' in facet && facet.ephemeral === true;
}

export function hasStreamAspect(facet: Facet): facet is Facet & StreamAspect {
  return 'streamId' in facet;
}

export function hasScopedAspect(facet: Facet): facet is Facet & ScopedAspect {
  return 'scopes' in facet;
}

export function hasTargetedAspect(facet: Facet): facet is Facet & TargetedAspect {
  return 'targetFacetIds' in facet;
}
